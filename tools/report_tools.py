import json
import os
from typing import Annotated
from langchain_core.tools import tool, InjectedToolCallId
from langgraph.prebuilt import InjectedState
from langgraph.graph import MessagesState
from models.data_models import ReportOutput
from utils.helpers import get_sessions_path, ensure_directory_exists


@tool("save_report_to_markdown", description="Save the final report as a markdown file in the session folder.")
def save_report_to_markdown(
    report_data: str,
    state: Annotated[MessagesState, InjectedState],
    tool_call_id: Annotated[str, InjectedToolCallId],
) -> str:
    """Save report output as both JSON and markdown files in the session folder."""
    try:
        # Parse the report data
        import json
        report_dict = json.loads(report_data)
        report_output = ReportOutput(**report_dict)
        
        session_id = report_output.session_id
        
        # Create report_agent folder in session path
        session_path = get_sessions_path(session_id)
        report_folder = session_path / "report_agent"
        ensure_directory_exists(report_folder)
        
        # Save JSON output
        json_file = report_folder / "report_output.json"
        with open(json_file, 'w') as f:
            json.dump(report_output.model_dump(), f, indent=2)
        
        # Generate markdown content
        markdown_content = generate_markdown_report(report_output)
        
        # Save markdown file in main session folder
        markdown_file = session_path / "report.md"
        with open(markdown_file, 'w') as f:
            f.write(markdown_content)
        
        return f"Report saved successfully to {markdown_file}"
        
    except Exception as e:
        return f"Error saving report: {str(e)}"


def generate_markdown_report(report_output: ReportOutput) -> str:
    """Generate markdown content from ReportOutput model."""
    
    # Format steps as numbered list
    steps_list = ""
    if report_output.steps_taken:
        for i, step in enumerate(report_output.steps_taken, 1):
            steps_list += f"{i}. {step}\n"
    else:
        steps_list = "No steps recorded"
    
    # Format lessons learned as bullet points
    lessons_list = ""
    if report_output.lessons_learned:
        for lesson in report_output.lessons_learned:
            lessons_list += f"- {lesson}\n"
    else:
        lessons_list = "No lessons learned recorded"
    
    # Format follow-up actions as bullet points
    followup_list = ""
    if report_output.follow_up_actions:
        for action in report_output.follow_up_actions:
            followup_list += f"- {action}\n"
    else:
        followup_list = "No follow-up actions required"
    
    markdown_template = f"""# Ticket Resolution Report

**Session ID:** {report_output.session_id}
**Timestamp:** {report_output.timestamp}
**Ticket ID:** {report_output.ticket_id}

## Resolution Status
{report_output.resolution_status}

## Summary
{report_output.resolution_summary}

## Steps Taken
{steps_list}

## Time to Resolution
{report_output.time_to_resolution}

## Confidence Score
{report_output.confidence_score}/1.0

## Lessons Learned
{lessons_list}

## Follow-up Actions
{followup_list}

---
*Report generated by RCS Agentic System*
"""
    
    return markdown_template